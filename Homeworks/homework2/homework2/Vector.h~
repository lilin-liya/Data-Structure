/**
* Homework 2: Using Template
* Assigned: September 13
* Due: September 23 24:00
**/

// [TODO]
// Student ID: 5130379091
// Name: 李林
//

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>
#include <stdexcept>

#include <iostream>

using namespace std;

#define INIT_CAPACITY 100

template <typename T>
class Vector {
private:
	// [TODO] Add private variables and methods here

	size_t	capacity;
	size_t _size;
	T* _storage;
	void copyInternalData(const Vector & other);
	//void clear();

public:
	// Do NOT modify following interfaces
	Vector();
	Vector(int size, const T& val = T());
	Vector(const Vector& x);
	~Vector();
	Vector<T>& operator=(const Vector<T>& x);
	int size() const;
	bool empty() const;
	T& operator [](int pos);
	void resize(size_t n, T val = T());
	void push_back(const T& val);
	void sort();
};

template <typename T>
void Vector<T>::copyInternalData(const Vector & other) {
	_storage = new T[INIT_CAPACITY];
	for (int i = 0; i < other._size; i++) {
		_storage[i] = other._storage[i];
	}
	_size = other._size;
	capacity = INIT_CAPACITY;
}

// template <typename T>
// void Vector<T>::clear() {
//    if (_storage != NULL) 
//    	delete[] _storage;
//    _size = 0;
//    capacity = INIT_CAPACITY;
//    _storage = new T[capacity];
// }

// (default constructor)
// Constructs an empty container, with no elements.
template <typename T>
Vector<T>::Vector() {
	// [TODO]
	capacity = INIT_CAPACITY;
	_size = 0;
	_storage = new T[capacity];
}

// (fill constructor)
// Constructs a container with n elements.
// Each element is a copy of val.
template <typename T>
Vector<T>::Vector(int size, const T& val) {
	// [TODO]
	capacity = size;
	_size = size;
	_storage = new T[_size];
	for (int i = 0; i <_size; ++i)
		_storage[i] = val;
}

// (copy constructor)
// Constructs a container with a copy of each of the
// elements in x, in the same order.
template <typename T>
Vector<T>::Vector(const Vector& x) {
	// [TODO]
	copyInternalData(x);
}

// (destructor)
// Destroys the container object.
template <typename T>
Vector<T>::~Vector() {
	// [TODO]
	delete[] _storage;
}

// operator=
// Assigns new contents to the container, replacing its
// current contents, and modifying its size accordingly.
template <typename T>
Vector<T>& Vector<T>::operator=(const Vector<T>& x) {
	// [TODO]
	if (this != &x) {
		//clear();
		copyInternalData(x);
	}
	return *this;
}

// size
// Returns the number of elements in the vector.
// This is the number of actual objects held in the
// vector, which is not necessarily equal to its
// storage capacity.
template <typename T>
int Vector<T>::size() const {
	// [TODO]
	return _size;
}

// empty
// Returns whether the vector is empty
template <typename T>
bool Vector<T>::empty() const {
	// [TODO]
	return _size == 0;
}

// operator[]
// Returns a reference to the element at position n
// in the vector container.
// if the requested position is out of range, the
// behavior is undefined
template <typename T>
T& Vector<T>::operator[](int pos) {
	// [TODO]
	//if (pos < 0 || pos >= _size) {
	//	Error("Vector selection index out of range");
	//}
	return _storage[pos];
}

// resize
// Resizes the container so that it contains n elements.
// If n is smaller than the current container size, the 
// content is reduced to its first n elements, removing 
// those beyond (and destroying them).
// If n is greater than the current container size, the 
// content is expanded by inserting at the end as many 
// elements as needed to reach a size of n. If val is 
// specified, the new elements are initialized as copies 
// of val, otherwise, they are value-initialized.
template <typename T>
void Vector<T>::resize(size_t n, T val) {
	// [TODO]

	if (n <= _size)
	{
   		_size = n;
	}
	if (n > _size)
	{
		for (int i = _size; i < n; ++i)
		{
			push_back(val);
		}
		_size = n;
	}
}

// push_back
// Adds a new element at the end of the vector, after its
// current last element. The content of val is copied (or
// moved) to the new element.
template <typename T>
void Vector<T>::push_back(const T& val) {
	// [TODO]
	_storage[_size] = val;
	_size++;
}

// a general sort
// Sort the vector, output the result in std out
// with monotonically increasing order in one line
// for instance: 
//     your original vector is 3 2 4 5
//     your output after sorting is 2 3 4 5
// you shouldn't change the order of oringinal vector
template <typename T>
void Vector<T>::sort() {
	// [TODO]
	/*Vector<T> copy_sort(*this);
	for(int i = 1; i < _size; i++)
	{  
        if(copy_sort[i] < copy_sort[i-1])
        {         
            int j= i-1;   
            int x = copy_sort[i];       
            copy_sort[i] = copy_sort[i-1];       
            while(x < copy_sort[j])
            {  
                copy_sort[j+1] = copy_sort[j];  
                j--;      
            }  
        copy_sort[j+1] = x;  
    	}
    }  
    for (int i = 0; i < copy_sort.size(); ++i)
    {
    	std::cout<<copy_sort[i]<<" ";
    }*/
}

// specialization of string
// Sort the string vector in lexicographical increasing order 
// from tail to head!
// for instance:
//      your original vector is "abc" "cba" "bcaa"
//      your output after sorting is "bcaa" "cba" "abc"
// you shouldn't change the order of oringinal vector
template <>
void Vector<string>::sort() {
	//[TODO]
}


#endif

